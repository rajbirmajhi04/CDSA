Time complexity is not the actual time taken but the amount of time taken as function of input size(n).

Refers to the computational complexity that describes the amount of time it takes to run an algorithm as a function of the size of its input.

It gives a theoretical measure of the performance of an algorithm in terms of how the execution time increases with the input size.

Big (O): Worst Case (Upper Bound)
Theta: Average Case 
Omega: Best Case (Lower Bound)

Finding Time Complexity:
i) Ignore constants
ii) Focus on largest term 

Common Time Complexities:
1) O(1)
2) O(log n)
3) O(n)
4) O(nlogn)
5) O(n2)
6) O(n3)
7) O(2^x)
7) O(n!)

Time complexity for Recursion:
TC = total no. of recursice calls * work in each calls

Space complexity for Recusrion:
--> In normal code using loops the total number of variables created are considered as auxiliary space but in 
recursive pr recursion there is a stack called call stack.
--> In recursion still we dont make any extra variables, still there is a extra stack used in the memory.
--> Here auxiliary space is also taken into count + the call stack memory is added.

--> SC = depth of recursion tree * memory in each call
--> SC = height of call * memory in each call






