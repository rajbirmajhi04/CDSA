Time complexity is not the actual time taken but the amount of time taken as function of input size(n).

Refers to the computational complexity that describes the amount of time it takes to run an algorithm as a function of the size of its input.

It gives a theoretical measure of the performance of an algorithm in terms of how the execution time increases with the input size.

Big (O): Worst Case (Upper Bound)
Theta: Average Case 
Omega: Best Case (Lower Bound)

Finding Time Complexity:
i) Ignore constants
ii) Focus on largest term 

Common Time Complexities:
1) O(1)
2) O(log n)
3) O(n)
4) O(nlogn)
5) O(n2)
6) O(n3)
7) O(2^x)
7) O(n!)





